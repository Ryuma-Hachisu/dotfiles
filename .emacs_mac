;;　キーバインディング
;;  C-h バックスペースと同じ
;;  C-d バックスペースと同じ
;;
;;;;  ruby mode rails中;;;;
;;  (define-key ruby-mode-map "\M-\C-i" 'rct-complete-symbol)
;;  (define-key ruby-mode-map "\C-c\C-t" 'ruby-toggle-buffer)
;;  (define-key ruby-mode-map "\C-c\C-d" 'xmp)
;;  (define-key ruby-mode-map "\C-c\C-f" 'rct-ri))
;;;; helm
;;
;;(define-key global-map (kbd "M-x")     'helm-M-x)
;;(define-key global-map (kbd "C-x C-f") 'helm-find-files)
;;(define-key global-map (kbd "C-x C-r") 'helm-recentf)
;;(define-key global-map (kbd "M-y")     'helm-show-kill-ring)
;;(define-key global-map (kbd "C-c i")   'helm-imenu)
;;(define-key global-map (kbd "C-x b")   'helm-buffers-list)
;;(define-key helm-map (kbd "C-h") 'delete-backward-char)
;;(define-key helm-find-files-map (kbd "C-h") 'delete-backward-char)
;;(define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action)
;;(define-key helm-read-file-map (kbd "TAB") 'helm-execute-persistent-action)
;;(define-key global-map (kbd "C-x g") 'helm-ls-git-ls)
;;
;;
;;;;
;; tabbar
;; C-TAB   表タブ
;; C-S-TAB 逆タブ
;;;;
;;
;;  M-s ag （高速なgrep）
;;  M-, findタグ

(cd "~/")

(setq load-path (cons "~/.emacs.d/elisp" load-path))

(let ((default-directory (expand-file-name "~/.emacs.d/elisp")))
  (add-to-list 'load-path default-directory)
  (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
      (normal-top-level-add-subdirs-to-load-path)))

(require 'init-loader)
(setq init-loader-show-log-after-init nil)

(define-key global-map "\C-h" 'delete-backward-char) ; 削除
(define-key global-map "\C-d" 'delete-backward-char) ; 削除

;;; Localeに合わせた環境の設定
(set-locale-environment nil)

;;; ホイールマウス
(mouse-wheel-mode t)
(setq mouse-wheel-follow-mouse t)

;;; 対応する括弧を光らせる。
(show-paren-mode 1)

(if  window-system(progn
;;; ツールバーを消す
(tool-bar-mode 0)
))

;;; バックアップファイルを作らない
(setq backup-inhibited t)

(setq transpose-chars nil)

;; リージョンだす
(setq-default transient-mark-mode t)

;;; 終了時にオートセーブファイルを消す
(setq delete-auto-save-files t)

;;; 補完時に大文字小文字を区別しない
(setq completion-ignore-case t)

;;; 強力な補完機能を使う
;;; p-bでprint-bufferとか
;;(load "complete")
;;(partial-completion-mode 1)

;;; 補完可能なものを随時表示
;;; 少しうるさい
(icomplete-mode 1)

;;; カーソルの位置が何文字目かを表示する
(column-number-mode t)

;;; カーソルの位置が何行目かを表示する
(line-number-mode t)

;;; スクロールバーを右側に表示する
;;(set-scroll-bar-mode 'right)

;;; 行の先頭でC-kを一回押すだけで行全体を消去する
(setq kill-whole-line t)

;;; バッファの最後でnewlineで新規行を追加するのを禁止する
(setq next-line-add-newlines nil)

;;; emacs -nw で起動した時にメニューバーを消す
(if window-system (menu-bar-mode 1) (menu-bar-mode -1))

;;; 画像ファイルを表示する
(auto-image-file-mode t)

(setq desktop-files-not-to-save "\\(^/[^/:]*:\\|\\.diary$\\)")
(autoload 'desktop-save "desktop" nil t)
(autoload 'desktop-clear "desktop" nil t)
(autoload 'desktop-load-default "desktop" nil t)

;;; セッションを保存する
;;; 初めは手動でM-x desktop-saveしなければいけない
(desktop-load-default)
(autoload 'desktop-remove "desktop" nil t)
(desktop-read)
(add-hook 'kill-emacs-hook 'desktop-save-in-desktop-dir)

;;; 自動でファイルを挿入する
(auto-insert-mode t)

;;; 次のGCまでに使用可能なバイト数
(setq gc-cons-threshold 4096000)

;;; 最近使ったファイルを保存(M-x recentf-open-filesで開く)
(recentf-mode)

;; ミニバッファの履歴を保存する
(savehist-mode 1)

;; ミニバッファの履歴の保存数を増やす
(setq history-length 3000)

;; シンボリックリンクのファイル開くたびに聞かれるためむかつくから消す
(setq vc-follow-symlinks t)

;; 文字の色を設定します。
(add-to-list 'default-frame-alist '(foreground-color . "black"))
;; 背景色を設定します。
(add-to-list 'default-frame-alist '(background-color ."white"))
;; カーソルの色を設定します。
(add-to-list 'default-frame-alist '(cursor-color . "SlateBlue2"))
;; マウスポインタの色を設定します。
(add-to-list 'default-frame-alist '(mouse-color . "SlateBlue2"))


;; 改行コードを表示
(setq eol-mnemonic-dos "(CRLF)")
(setq eol-mnemonic-mac "(CR)")
(setq eol-mnemonic-unix "(LF)")

;; "yes or no"を"y or n"に
(fset 'yes-or-no-p 'y-or-n-p)

;; auto-complete
;; 補完候補を自動ポップアップ
;;(require 'auto-complete)
;;(global-auto-complete-mode t)
;;(setq ac-modes (cons 'js-mode ac-modes))

;; タブとか
(setq js-indent-level 4)


;; gtagsの設定
(autoload 'gtags-mode "gtags" "" t)
(setq gtags-mode-hook
      '(lambda ()
         (local-set-key "\M-t" 'gtags-find-tag)
         (local-set-key "\M-r" 'gtags-find-rtag)
         (local-set-key "\M-s" 'gtags-find-symbol)
         (local-set-key "\C-t" 'gtags-pop-stack)
         ))

(add-hook 'c-mode-common-hook
          '(lambda()
             (gtags-mode 1)
             (gtags-make-complete-list)
             ))

(add-hook 'php-mode-common-hook
          '(lambda ()
             (gtags-mode 1)
             (gtags-make-complete-list)
             ))


;; (2) And put the following in your ~/.emacs startup file:
(require 'auto-install)
;; (3) Add this to your ~/.emacs to optionally specify a download directory:
(setq auto-install-directory "~/.emacs.d/elisp/")
;; (4) Optionally, if your computer is always connected Internet when Emacs start up,


;; elispのインストールを簡単に
(require 'install-elisp)
(setq install-elisp-repository-directory "~/.emacs.d/elisp/")

;; 改行コードを表示
(setq eol-mnemonic-dos "(CRLF)")
(setq eol-mnemonic-mac "(CR)")
(setq eol-mnemonic-unix "(LF)")

;; "yes or no"を"y or n"に
(fset 'yes-or-no-p 'y-or-n-p)

;; auto-complete
;; 補完候補を自動ポップアップ
;;(require 'auto-complete)
;;(global-auto-complete-mode t)
;;(setq ac-modes (cons 'js-mode ac-modes))

;; タブとか
(setq js-indent-level 4)


;; gtagsの設定
(autoload 'gtags-mode "gtags" "" t)
(setq gtags-mode-hook
      '(lambda ()
         (local-set-key "\M-t" 'gtags-find-tag)
         (local-set-key "\M-r" 'gtags-find-rtag)
         (local-set-key "\M-s" 'gtags-find-symbol)
         (local-set-key "\C-t" 'gtags-pop-stack)
         ))

(add-hook 'c-mode-common-hook
          '(lambda()
             (gtags-mode 1)
             (gtags-make-complete-list)
             ))

(add-hook 'php-mode-common-hook
          '(lambda ()
             (gtags-mode 1)
             (gtags-make-complete-list)
             ))

;; やっておかないとだめ
(condition-case nil
    (called-interactively-p nil)

  (defmacro called-interactively-p (arg)

    (case arg
          (interactive `(interactive-p))

      ((any nil) `(called-interactively-p)))))


;; (2) And put the following in your ~/.emacs startup file:
(require 'auto-install)
;; (3) Add this to your ~/.emacs to optionally specify a download directory:
(setq auto-install-directory "~/.emacs.d/elisp/")
;; (4) Optionally, if your computer is always connected Internet when Emacs start up,
;;     I recommend you add below to your ~/.emacs, to update package name when start up:
(auto-install-update-emacswiki-package-name t)
;;     And above setup is not necessary, because AutoInstall will automatically update-emacswiki-package-name;;     package name when you just first call `auto-install-from-emacswiki',
;;     above setup just avoid *delay* when you first call `auto-install-from-emacswiki'.d/elisp;;
;; (5) I recommend you add below to your ~/.emacs for install-elisp users:
(auto-install-compatibility-setup)

(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.\\(js\\|json\\)$" . js2-mode))

(add-to-list 'auto-mode-alist '("\\.m?$" . objc-mode))
(add-to-list 'auto-mode-alist '("\\.h$" . objc-mode))


;; clipboard
(if (not window-system)
    (progn(defun copy-from-osx ()
            (shell-command-to-string "pbpaste"))
          (defun paste-to-osx (text &optional push)
            (let ((process-connection-type nil))
              (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
                (process-send-string proc text)
                (process-send-eof proc))))
          (setq interprogram-cut-function 'paste-to-osx)
          (setq interprogram-paste-function 'copy-from-osx)))


;; ruby のdo endなどの対応関係を自動で補正
(require 'ruby-electric)
(add-hook 'ruby-mode-hook '(lambda () (ruby-electric-mode t)))
(setq ruby-electric-expand-delimiters-list nil)


;; objc, Xcode
(setq auto-mode-alist (append (list '("\\.h$" . objc-mode)
                                    '("\\.m$" . objc-mode))
                              auto-mode-alist))
(add-hook 'objc-mode-hook
          (lambda ()
            (define-key objc-mode-map "\C-c\C-b" 'compile)
            (define-key objc-mode-map "\C-c\C-r" 'run)
            (define-key objc-mode-map "\C-c\C-x" 'xcode)
            (define-key objc-mode-map "\C-c\C-d" 'doc)
            (define-key objc-mode-map "\C-c\C-c" 'comment-region)
            (define-key objc-mode-map "\C-cc"    'uncomment-region)
            (setq compile-command "xcodebuild -project ../*.xcodeproj -configuration Debug -sdk iphonesimulator4.3 ")
            (setq compilation-scroll-output t)))
(defun doc ()
  (interactive)
  (shell-command-to-string "~/bin/xcode-show-doc.sh"))
(defun xcode ()
  (interactive)
  (shell-command-to-string "~/bin/xcode-show-proj.sh"))
(defun run ()
  (interactive)
  (shell-command-to-string "~/bin/xcode-run.sh"))




(require 'recentf)
(setq recentf-max-saved-items 1000)
(recentf-mode 1)
(put 'set-goal-column 'disabled nil)

;; タイトル出さない
(setq inhibit-startup-message t)

;;tree-undo
(when (require 'undo-tree nil t)
  (global-undo-tree-mode))


;; undo機能
;; ※C-?で Redo
(global-set-key [?\C-/] 'undo)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;              ruby の設定
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; ruby-mode
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)
(setq auto-mode-alist
      (append '(("\\.\\(rb\\|rake\\|rabl\\|gemspec\\|ru\\)$" . ruby-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\(Rake\\|Gem\\|Guard\\|Cap\\|Vagrant\\)file$" . ruby-mode)) auto-mode-alist))
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
                                     interpreter-mode-alist))

;; rspec-mode
(require 'rspec-mode)

;; Indent setting
(setq ruby-deep-indent-paren-style nil)
(defadvice ruby-indent-line (after unindent-closing-paren activate)
  (let ((column (current-column))
        indent offset)
    (save-excursion
      (back-to-indentation)
      (let ((state (syntax-ppss)))
        (setq offset (- column (current-column)))
        (when (and (eq (char-after) ?\))
                   (not (zerop (car state))))
          (goto-char (cadr state))
          (setq indent (current-indentation)))))
    (when indent
      (indent-line-to indent)
      (when (> offset 0) (forward-char offset)))))

;; highlight ruby 1.9 hash
(font-lock-add-keywords
 'ruby-mode
 '(("\\(\\b\\sw[_a-zA-Z0-9]*:\\)\\(?:\\s-\\|$\\)" (1 font-lock-constant-face))))

(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

(add-to-list 'auto-mode-alist '(".emacs_mac$" . lisp-mode))

;; ruby の補正
(require 'ruby-electric)
(add-hook 'ruby-mode-hook '(lambda () (ruby-electric-mode t)))
(setq ruby-electric-expand-delimiters-list nil)


(require 'rcodetools)
(setq rct-find-tag-if-available nil)
(defun ruby-mode-hook-rcodetools ()
  (define-key ruby-mode-map "\M-\C-i" 'rct-complete-symbol)
  (define-key ruby-mode-map "\C-c\C-t" 'ruby-toggle-buffer)
  (define-key ruby-mode-map "\C-c\C-d" 'xmp)
  (define-key ruby-mode-map "\C-c\C-f" 'rct-ri))
(add-hook 'ruby-mode-hook 'ruby-mode-hook-rcodetools)

(global-auto-revert-mode 1)

;; tags ファイル作成
;; visit-tags-table タグファイルを指定する
(setq rinari-tags-file-name "tags")

;;; package.el
(when (require 'package nil t)
  ;; package.elでelispを入れるdirectoryの設定
  ;; パッケージリポジトリにMarmaladeを追加
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
  (add-to-list 'package-archives '("ELPA" . "http://tromey.com/elpa/"))
  ;; インストールしたパッケージにロードパスを通してロードする
  (package-initialize))

(setq package-user-dir "~/.emacs.d/elisp/elpa/")

;;(defvar my/packages
;;  '(git-gutter)
;;  "A list of packages to install from MELPA at launch.")

;; Install Melpa packages
;;(dolist (package my/packages)
;;  (when (or (not (package-installed-p package)))
;;    (package-install package)))
  

;; melpa.el
;;(require 'melpa)

;;; elisp
(require 'helm-config)
(helm-mode 1)

(require 'helm-files)
(require 'helm-ag)

(setq helm-ag-base-command "ag --nocolor --nogroup")

(require 'helm-files)

;; 自動補完を無効
(custom-set-variables '(helm-ff-auto-update-initial-value nil))

;Alt+sでag実行
(define-key global-map (kbd "M-s")     'helm-ag)

;; ミニバッファで C-h でヘルプでないようにする
(load "term/bobcat")
(when (fboundp 'terminal-init-bobcat)
  (terminal-init-bobcat))

(define-key global-map (kbd "M-x")     'helm-M-x)
(define-key global-map (kbd "C-x C-f") 'helm-find-files)
(define-key global-map (kbd "C-x C-r") 'helm-recentf)
(define-key global-map (kbd "M-y")     'helm-show-kill-ring)
(define-key global-map (kbd "C-c i")   'helm-imenu)
(define-key global-map (kbd "C-x b")   'helm-buffers-list)

(define-key helm-map (kbd "C-h") 'delete-backward-char)
(define-key helm-find-files-map (kbd "C-h") 'delete-backward-char)
(define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action)
(define-key helm-read-file-map (kbd "TAB") 'helm-execute-persistent-action)


;; Disable helm in some functions
(add-to-list 'helm-completing-read-handlers-alist '(find-alternate-file . nil))

;; Emulate `kill-line' in helm minibuffer
(setq helm-delete-minibuffer-contents-from-point t)
(defadvice helm-delete-minibuffer-contents (before helm-emulate-kill-line activate)
  "Emulate `kill-line' in helm minibuffer"
  (kill-new (buffer-substring (point) (field-end))))

;; 新しいバッファを作成しないように
(defadvice helm-ff-kill-or-find-buffer-fname (around execute-only-if-exist activate)
  "Execute command only if CANDIDATE exists"
  (when (file-exists-p candidate)
    ad-do-it))

(defadvice helm-ff-transform-fname-for-completion (around my-transform activate)
  "Transform the pattern to reflect my intention"
  (let* ((pattern (ad-get-arg 0))
         (input-pattern (file-name-nondirectory pattern))
         (dirname (file-name-directory pattern)))
    (setq input-pattern (replace-regexp-in-string "\\." "\\\\." input-pattern))
    (setq ad-return-value
          (concat dirname
                  (if (string-match "^\\^" input-pattern)
                      ;; '^' is a pattern for basename
                      ;; and not required because the directory name is prepended
                      (substring input-pattern 1)
                    (concat ".*" input-pattern))))))

(defun helm-buffers-list-pattern-transformer (pattern)
  (if (equal pattern "")
      pattern
    ;; Escape '.' to match '.' instead of an arbitrary character
    (setq pattern (replace-regexp-in-string "\\." "\\\\." pattern))
    (let ((first-char (substring pattern 0 1)))
      (cond ((equal first-char "*")
             (concat " " pattern))
            ((equal first-char "=")
             (concat "*" (substring pattern 1)))
            (t
             pattern)))))

(add-to-list 'helm-source-buffers-list
             '(pattern-transformer helm-buffers-list-pattern-transformer))

(require 'helm-rails-loaddefs)

(define-key global-map (kbd "s-t") 'helm-rails-controllers)
(define-key global-map (kbd "s-y") 'helm-rails-models)
(define-key global-map (kbd "s-u") 'helm-rails-views)
(define-key global-map (kbd "s-o") 'helm-rails-specs)
(define-key global-map (kbd "s-r") 'helm-rails-all)

(define-key global-map "\C-q" 'helm-resume) ; helm間違えた時元に戻るコマンド

;; dired の拡張
(setq dired-dwim-target t)


;; helm ls git 
(require 'helm-ls-git)
(define-key global-map (kbd "C-x g") 'helm-ls-git-ls)

;; helm recentf only directories
(defvar helm-c-recentf-directory-source
  '((name . "Recentf Directry")
    (candidates . (lambda ()
                    (loop for file in recentf-list
                          when (file-directory-p file)
                          collect file)))
    (type . file)))

(defun my/helm-recentf (arg)
  (interactive "P")
  (if current-prefix-arg
      (helm-other-buffer helm-c-recentf-directory-source "*helm recentf*")
    (call-interactively 'helm-recentf)))


(require 'git-gutter)
(global-git-gutter-mode +1)

;; コントロール用のバッファを同一フレーム内に表示
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;; diffのバッファを上下ではなく左右に並べる
(setq ediff-split-window-function 'split-window-horizontally)

;; magitも入れとく
(require 'magit)

;; @ tabbar.el

;; タブ化
;; http://www.emacswiki.org/emacs/tabbar.el
;;(require 'cl)
(require 'tabbar nil t)
;; tabbarを有効にする
(tabbar-mode 1)

;; ボタンをシンプルにする
(setq tabbar-home-button-enabled "")
(setq tabbar-scroll-right-button-enabled "")
(setq tabbar-scroll-left-button-enabled "")
(setq tabbar-scroll-right-button-disabled "")
(setq tabbar-scroll-left-button-disabled "")

;; Ctrl-Tab, Ctrl-Shift-Tab でタブを切り替える
(dolist (func '(tabbar-mode tabbar-forward-tab tabbar-forward-group tabbar-backward-tab tabbar-backward-group))
  (autoload func "tabbar" "Tabs at the top of buffers and easy control-tab navigation"))
(defmacro defun-prefix-alt (name on-no-prefix on-prefix &optional do-always)
  `(defun ,name (arg)
     (interactive "P")
     ,do-always
     (if (equal nil arg)
         ,on-no-prefix
       ,on-prefix)))
(defun-prefix-alt shk-tabbar-next (tabbar-forward-tab) (tabbar-forward-group) (tabbar-mode 1))
(defun-prefix-alt shk-tabbar-prev (tabbar-backward-tab) (tabbar-backward-group) (tabbar-mode 1))
(global-set-key [(control tab)] 'shk-tabbar-next)
(global-set-key [(control shift tab)] 'shk-tabbar-prev)

(require 'helm-descbinds)
(helm-descbinds-mode)
;; prior to emacs24
(helm-descbinds-mode 1)

(define-key global-map (kbd "C-c C-b") 'describe-bindings)

;;(setq debug-on-error t)
